{
  "id": "sysml_8432829184426864941_1761909814",
  "task": "Create a SysML package for a simple drone",
  "generated_code": "## System Definition\npackage DroneSystem {\n\n    // Core imports\n    import ScalarValues::*;\n    import ISQ::*;\n    import Systems::*;\n    import Connections::*;\n    import Items::*;\n    import Ports::*;\n    import Actors::*;\n    import Requirements::*;\n\n    // Actor definitions\n    actor def Pilot {\n        doc \"Human operator controlling drone operations\"\n    }\n\n    actor def GroundStation {\n        doc \"System for mission planning and visual monitoring\"\n    }\n\n    // Port definitions\n    port def ControlPort {\n        doc \"Receives flight control commands\"\n    }\n\n    port def TelemetryPort {\n        doc \"Transmits operational telemetry data\"\n    }\n\n    port def PowerPort {\n        doc \"Distributes electrical power to components\"\n    }\n\n    // Part definitions\n    part def Drone {\n        attribute maxSpeed : VelocityValue = 15.0 [m/s];\n        attribute flightTime : TimeValue = 20.0 [min];\n        attribute payloadCapacity : MassValue = 500.0 [g];\n        attribute totalMass : MassValue = 1500.0 [g];\n        \n        // Physical components\n        part flightController : FlightController;\n        part batteryPack : BatteryPack;\n        part camera : Camera;\n        part propulsionUnit : PropulsionUnit;\n        \n        // Interfaces\n        port controlPort : ControlPort;\n        port telemetryPort : TelemetryPort;\n        port powerPort : PowerPort;\n        \n        // Internal connections\n        connect flightController.controlPort to controlPort;\n        connect batteryPack.powerPort to powerPort;\n        connect camera.dataPort to telemetryPort;\n        \n        // Power distribution\n        connect batteryPack.powerOut to flightController.powerIn;\n        connect batteryPack.powerOut to camera.powerIn;\n        connect batteryPack.powerOut to propulsionUnit.powerIn;\n        \n        // Sensor data flow\n        connect flightController.gpsIn to propulsionUnit.gpsOut;\n        connect flightController.altimeterIn to propulsionUnit.altimeterOut;\n        \n        // Mass balance constraint\n        constraint { totalMass == \n            drone.propulsionUnit.weight + \n            drone.flightController.weight + \n            drone.batteryPack.weight + \n            drone.camera.weight }\n        \n        // Performance constraints\n        constraint { maxSpeed <= 15.0 [m/s] }\n        constraint { flightTime >= 20.0 [min] }\n        constraint { payloadCapacity >= 500.0 [g] }\n    }\n\n    part def FlightController {\n        attribute stabilizationAccuracy : Real = 0.5; // degrees\n        attribute responseTime : TimeValue = 0.1 [s];\n        attribute weight : MassValue = 150.0 [g];\n        \n        port controlPort : ControlPort;\n        port powerIn : PowerPort;\n        port gpsIn;\n        port altimeterIn;\n        \n        // Performance constraints\n        constraint { stabilizationAccuracy <= 1.0 }\n        constraint { responseTime <= 0.5 [s] }\n    }\n\n    part def BatteryPack {\n        attribute capacity : EnergyValue = 500.0 [Wh];\n        attribute voltage : ElectricPotentialValue = 11.1 [V];\n        attribute weight : MassValue = 300.0 [g];\n        attribute dischargeRate : ElectricCurrentValue = 10.0 [A];\n        \n        port powerPort : PowerPort;\n        port powerOut : PowerPort;\n        \n        // Electrical specifications\n        constraint { capacity >= 400.0 [Wh] }\n        constraint { voltage >= 11.0 [V] }\n        constraint { dischargeRate <= 20.0 [A] }\n    }\n\n    part def Camera {\n        attribute resolution : Integer = 1080; // pixels\n        attribute frameRate : Real = 30.0; // fps\n        attribute weight : MassValue = 200.0 [g];\n        attribute powerConsumption : PowerValue = 5.0 [W];\n        \n        port dataPort : TelemetryPort;\n        port powerIn : PowerPort;\n        \n        // Performance constraints\n        constraint { resolution >= 720 }\n        constraint { frameRate >= 15.0 }\n    }\n\n    part def PropulsionUnit {\n        attribute thrust : ForceValue = 20.0 [N];\n        attribute efficiency : Real = 0.8; // dimensionless\n        attribute weight : MassValue = 200.0 [g];\n        attribute powerConsumption : PowerValue = 200.0 [W];\n        \n        port powerIn : PowerPort;\n        port gpsOut;\n        port altimeterOut;\n        \n        // Performance constraints\n        constraint { thrust >= 15.0 [N] }\n        constraint { efficiency >= 0.6 }\n    }\n\n    // Requirement definitions\n    requirement def FlightTimeRequirement {\n        :>> text = \"The drone shall have a minimum flight time of 20 minutes\";\n        attribute requiredFlightTime : TimeValue = 20.0 [min];\n        \n        constraint { requiredFlightTime >= 20.0 [min] }\n    }\n\n    requirement def MaxSpeedRequirement {\n        :>> text = \"The drone shall operate at a maximum speed of 15 meters per second\";\n        attribute maxAllowedSpeed : VelocityValue = 15.0 [m/s];\n        \n        constraint { maxAllowedSpeed <= 15.0 [m/s] }\n    }\n\n    requirement def PayloadCapacityRequirement {\n        :>> text = \"The drone shall carry a minimum payload of 500 grams\";\n        attribute minPayloadCapacity : MassValue = 500.0 [g];\n        \n        constraint { minPayloadCapacity >= 500.0 [g] }\n    }\n\n    requirement def FAAComplianceRequirement {\n        :>> text = \"The drone shall comply with FAA Part 107 regulations\";\n    }\n\n    // Usage definition for flight mission\n    usage def FlightMission {\n        subject drone : Drone;\n        \n        // Mission parameters\n        attribute missionDuration : TimeValue = 25.0 [min];\n        attribute averageSpeed : VelocityValue = 10.0 [m/s];\n        attribute payloadWeight : MassValue = 600.0 [g];\n        attribute missionRange : LengthValue = 3.5 [km];\n        \n        // Verification of mission parameters\n        constraint { missionDuration <= drone.flightTime }\n        constraint { averageSpeed <= drone.maxSpeed }\n        constraint { payloadWeight <= drone.payloadCapacity }\n        constraint { missionRange <= drone.operatingRange }\n    }\n\n    // Parametric definition for power consumption model\n    analysis def PowerConsumptionModel {\n        attribute totalPowerConsumption : PowerValue = 0.0 [W];\n        attribute flightControllerPower : PowerValue = 15.0 [W];\n        attribute cameraPower : PowerValue = 5.0 [W];\n        attribute propulsionPower : PowerValue = 200.0 [W];\n        attribute batteryVoltage : ElectricPotentialValue = 11.1 [V];\n        attribute currentDraw : ElectricCurrentValue = 0.0 [A];\n        \n        // Power calculations\n        constraint { \n            totalPowerConsumption = \n                flightControllerPower + \n                cameraPower + \n                propulsionPower \n        }\n        constraint { currentDraw = totalPowerConsumption / batteryVoltage }\n        \n        part battery : BatteryPack;\n        part controller : FlightController;\n        part camera : Camera;\n        part propulsion : PropulsionUnit;\n    }\n\n    // Item definition for power flows\n    item def Power {\n        doc \"Electrical power flowing between components\"\n    }\n}",
  "human_feedback": "",
  "workflow_metadata": {
    "iterations_used": 3,
    "max_iterations": 3,
    "workflow_status": "human_approved"
  },
  "created_at": "2025-10-31T12:23:34.376185"
}
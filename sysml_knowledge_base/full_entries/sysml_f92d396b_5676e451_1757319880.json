{
  "id": "sysml_f92d396b_5676e451_1757319880",
  "task": "Design a satellite system with solar panels, communication antenna, attitude control thrusters, and payload bay.",
  "generated_code": "package 'Satellite System' {\n    private import SI::*;\n    private import ISQ::MassValue;\n    private import ISQ::LengthValue;\n    private import ScalarValues::Real;\n    private import ScalarValues::Boolean;\n    private import ScalarValues::String;\n    \n    attribute <'24h'> h = 3600 * s;\n    attribute <'180deg'> deg = pi * rad / 180;\n\n    // Requirement Definitions\n    requirement def MassLimit {\n        doc /* The total mass shall be less than the maximum allowable mass. */\n        attribute massActual : MassValue;\n        attribute massMax : MassValue;\n        require constraint { massActual <= massMax }\n    }\n\n    requirement def AccelerationRequirement {\n        doc /* The vehicle shall accelerate from 0 to 100 km/h in less than 8 seconds. */\n        attribute accelerationActual : Real;\n        attribute timeActual : TimeValue;\n        attribute accelerationRequired : Real = 12.5 [m / h / s];\n        attribute timeRequired : TimeValue = 8 [s];\n        require constraint { accelerationActual >= accelerationRequired & timeActual <= timeRequired }\n    }\n\n    requirement def StabilityRequirement {\n        doc /* The vehicle shall maintain stability during all operating conditions. */\n        attribute stabilityIndexActual : Real;\n        attribute stabilityIndexRequired : Real = 0.75;\n        require constraint { stabilityIndexActual >= stabilityIndexRequired }\n    }\n\n    // Part Definitions\n    part def SolarPanel {\n        attribute efficiency : Real;\n        attribute powerGenerated : PowerValue;\n    }\n\n    part def CommunicationAntenna {\n        attribute gain : Real;\n        attribute frequencyRange : String;\n    }\n\n    part def AttitudeControlThrusters {\n        attribute powerConsumption : PowerValue;\n        attribute maneuverTime : TimeValue;\n    }\n\n    part def PayloadBay {\n        attribute massLimit : MassValue;\n        attribute totalMassLoaded : MassValue;\n        require constraint { totalMassLoaded <= massLimit }\n    }\n\n    // Connection Definitions\n    connection def FuelSupply {\n        end fuelOut : FuelPort;\n        end fuelIn : FuelPort;\n    }\n\n    connection def PowerSupply {\n        end powerOut : ElectricalPowerPort;\n        end powerIn : ElectricalPowerPort;\n    }\n\n    connection def DataTransfer {\n        end txData : DataPort;\n        end rxData : DataPort;\n    }\n\n    // Port Definitions\n    port def FuelPort {\n        out fuelSupply : FuelValue;\n    }\n\n    port def ElectricalPowerPort {\n        in powerSupply : ElectricalPowerValue;\n    }\n\n    port def DataPort {\n        in transmitData : String;\n        out receiveData : String;\n    }\n\n    // Interface Definitions\n    interface def PowerInterface {\n        end powerOut : ElectricalPowerPort;\n        end powerIn : ElectricalPowerPort;\n    }\n\n    interface def FuelInterface {\n        end fuelOut : FuelPort;\n        end fuelIn : FuelPort;\n    }\n\n    interface def DataInterface {\n        end txData : DataPort;\n        end rxData : DataPort;\n    }\n\n    // Part Usages\n    part solarPanel1 : SolarPanel {\n        attribute efficiency = 0.25;\n        attribute powerGenerated = 500 [W];\n    }\n\n    part solarPanel2 : SolarPanel {\n        attribute efficiency = 0.30;\n        attribute powerGenerated = 750 [W];\n    }\n\n    part communicationAntenna : CommunicationAntenna {\n        attribute gain = 10.0;\n        attribute frequencyRange = \"UHF/VHF\";\n    }\n\n    part attitudeControlThrusters : AttitudeControlThrusters {\n        attribute powerConsumption = 200 [W];\n        attribute maneuverTime = 5 [s];\n    }\n\n    part fuelTank : FuelTank {\n        attribute totalFuel : Real;\n        attribute maxFuelCapacity : Real;\n        attribute fuelFlowRate : Real;\n        attribute fuelPressure : PressureValue;\n    }\n\n    part engine : Engine {\n        attribute powerOutput : PowerValue;\n        attribute massEngine : MassValue = 100.0 [kg];\n        attribute efficiency : Real;\n        attribute torque : TorqueValue;\n        attribute fuelConsumption : Real;\n        attribute ignitionSystem : IgnitionSystem;\n        attribute coolingSystem : CoolingSystem;\n    }\n\n    part battery : Battery {\n        attribute voltage : ElectricPotentialValue;\n        attribute capacity : ElectricChargeValue;\n        attribute massBattery : MassValue = 50.0 [kg];\n        attribute efficiency : Real;\n        attribute chargingRate : Real;\n        attribute dischargeRate : Real;\n    }\n\n    part avionics : AvionicsSubsystem {\n        attribute processingSpeed : Real;\n        attribute storageCapacity : Real;\n        attribute powerConsumption : PowerValue;\n        attribute massAvionics : MassValue = 50.0 [kg];\n        attribute communicationRange : LengthValue;\n        attribute dataTransferRate : Real;\n    }\n\n    part powerConverter : PowerConverter {\n        attribute conversionEfficiency : Real;\n        attribute inputVoltage : ElectricPotentialValue;\n        attribute outputVoltage : ElectricPotentialValue;\n        attribute massConverter : MassValue = 25.0 [kg];\n        attribute powerConsumption : PowerValue;\n        attribute coolingSystem : CoolingSystem;\n    }\n\n    part solarPanelArray : SolarPanelArray {\n        port panel1Port : PhotovoltaicPanelPort;\n        port panel2Port : PhotovoltaicPanelPort;\n    }\n\n    part fuelPump : FuelPump {\n        attribute pumpFlowRate : Real;\n        attribute pumpPressure : PressureValue;\n        attribute massPump : MassValue = 30.0 [kg];\n        attribute powerConsumption : PowerValue;\n        attribute coolingSystem : CoolingSystem;\n    }\n\n    part attitudeControlUnit : AttitudeControlUnit {\n        attribute processingSpeed : Real;\n        attribute storageCapacity : Real;\n        attribute powerConsumption : PowerValue;\n        attribute massAttitudeControl : MassValue = 30.0 [kg];\n        attribute gyroscopeAccuracy : Real;\n        attribute accelerometerAccuracy : Real;\n        attribute magnetometerAccuracy : Real;\n    }\n\n    part gyroscopes : Gyroscopes {\n        attribute accuracy : Real;\n        attribute sensitivity : Real;\n        attribute powerConsumption : PowerValue;\n        attribute massGyroscope : MassValue = 10.0 [kg];\n    }\n\n    part accelerometers : Accelerometers {\n        attribute sensitivity : Real;\n        attribute dynamicRange : Real;\n        attribute powerConsumption : PowerValue;\n        attribute massAccelerometer : MassValue = 5.0 [kg];\n    }\n\n    part magnetometers : Magnetometers {\n        attribute sensitivity : Real;\n        attribute accuracy : Real;\n        attribute powerConsumption : PowerValue;\n        attribute massMagnetometer : MassValue = 10.0 [kg];\n    }\n\n    part solarPanelArray : SolarPanelArray {\n        port panel1Port : PhotovoltaicPanelPort;\n        port panel2Port : PhotovoltaicPanelPort;\n    }\n\n    // Requirement Assertions\n    requirement assertMassLimit : MassLimit {\n        :>> massActual = totalMass;\n        :>> massMax = 5000.0 [kg];\n    }\n\n    requirement assertAcceleration : AccelerationRequirement {\n        :>> accelerationActual = engine.acceleration;\n        :>> timeActual = engine.startToReadyTime;\n    }\n\n    requirement assertStability : StabilityRequirement {\n        :>> stabilityIndexActual = avionics.stabilityIndex;\n    }\n\n    // State Machine Definition\n    state def SatelliteStates {\n        entry; then off;\n\n        state off {\n            entry action turnOffLED;\n            do action monitorPower {\n                out attribute isLowBattery : Boolean;\n            }\n            transition offToOn if monitorPower.isLowBattery then on;\n        }\n\n        state on {\n            entry action turnOnLED;\n            do action maintainOperation {\n                out attribute healthStatus : String;\n            }\n            transition onToOff if not monitorPower.isLowBattery then off;\n        }\n    }\n\n    // Context Definition\n    context def OperationalContext {\n        requirement massLimitAssertion : assertMassLimit;\n        requirement accelerationRequirement : assertAcceleration;\n        requirement stabilityRequirement : assertStability;\n    }\n\n    // Context Usage\n    context operationalContext : OperationalContext {\n        :>> totalMass = (fuelTank.totalFuel + engine.massEngine + battery.massBattery + avionics.massAvionics + powerConverter.massConverter + solarPanel1.mass + solarPanel2.mass + fuelPump.massPump + gyroscopes.massGyroscope + accelerometers.massAccelerometer + magnetometers.massMagnetometer) [kg];\n    }\n\n    // Part Grouping\n    part satellite : Satellite {\n        requirement massLimitAssertion : assertMassLimit;\n        requirement accelerationRequirement : assertAcceleration;\n        requirement stabilityRequirement : assertStability;\n\n        port fuelTankPort : FuelPort;\n        port solarPanelArrayPort : PhotovoltaicPanelPort;\n        port avionicsPort : DataPort;\n        port communicationPort : DataPort;\n\n        part fuelTankAssembly {\n            part fuelTank : FuelTank;\n            part fuelPump : FuelPump;\n            connection fuelSupply : FuelSupply {\n                end fuelOut = fuelPump.fuelOutPort;\n                end fuelIn = engine.fuelInPort;\n            }\n        }\n\n        part powerSupplyChain {\n            part solarPanelArray : SolarPanelArray;\n            part powerConverter : PowerConverter;\n            part battery : Battery;\n            connection solarToConverter : PowerSupply {\n                end powerOut = solarPanelArray.panel1Port;\n                end powerIn = powerConverter.panel1Port;\n            }\n            connection converterToBattery : PowerSupply {\n                end powerOut = powerConverter.powerOutPort;\n                end powerIn = battery.chargePort;\n            }\n        }\n\n        part attitudeControlSubsystem {\n            part gyroscopes : Gyroscopes;\n            part accelerometers : Accelerometers;\n            part magnetometers : Magnetometers;\n            part attitudeControlUnit : AttitudeControlUnit;\n            connection gyroToAttitude : DataTransfer {\n                end txData = gyroscopes.gyroDataPort;\n                end rxData = attitudeControlUnit.gyroDataPort;\n            }\n            connection accelToAttitude : DataTransfer {\n                end txData = accelerometers.accelDataPort;\n                end rxData = attitudeControlUnit.accelDataPort;\n            }\n            connection magToAttitude : DataTransfer {\n                end txData = magnetometers.magDataPort;\n                end rxData = attitudeControlUnit.magDataPort;\n            }\n        }\n\n        part propulsionSubsystem {\n            part engine : Engine;\n        }\n\n        part communicationSubsystem {\n            part communicationAntenna : CommunicationAntenna;\n            connection dataToAntenna : DataTransfer {\n                end txData = avionics.avionicsDataPort;\n                end rxData = communicationAntenna.antennaDataPort;\n            }\n        }\n\n        part navigationAndControlSubsystem {\n            part attitudeControlUnit : AttitudeControlUnit;\n            part gyroscopes : Gyroscopes;\n            part accelerometers : Accelerometers;\n            part magnetometers : Magnetometers;\n        }\n\n        part avionicsSubsystem {\n            part avionics : AvionicsSubsystem;\n            connection dataToAvionics : DataTransfer {\n                end txData = communicationAntenna.antennaDataPort;\n                end rxData = avionics.avionicsDataPort;\n            }\n        }\n\n        state satelliteStates : SatelliteStates;\n    }\n\n    // Port Connections\n    interface powerInterface : PowerInterface {\n        end powerOut = powerSupplyChain.powerConverter.powerOutPort;\n        end powerIn = propulsionSubsystem.engine.enginePowerPort;\n    }\n\n    interface fuelInterface : FuelInterface {\n        end fuelOut = fuelTankAssembly.fuelPump.fuelOutPort;\n        end fuelIn = propulsionSubsystem.engine.fuelInPort;\n    }\n\n    interface dataInterface : DataInterface {\n        end txData = avionicsSubsystem.avionics.avionicsDataPort;\n        end rxData = communicationSubsystem.communicationAntenna.antennaDataPort;\n    }\n}",
  "human_feedback": "",
  "validation_info": {
    "success": true,
    "validation_count": 4,
    "success_rate": 0.25,
    "final_errors": []
  },
  "workflow_metadata": {
    "iterations_used": 4,
    "max_iterations": 10,
    "human_review_enabled": true,
    "human_response": "a",
    "workflow_status": "human_approved"
  },
  "created_at": "2025-09-08T10:24:40.473189",
  "embedding_text": "Task: Design a satellite system with solar panels, communication antenna, attitude control thrusters, and payload bay. | Comments: // Requirement Definitions // Part Definitions // Connection Definitions // Port Definitions // Interface Definitions // Part Usages // Requirement Assertions // State Machine Definition // Context Definition // Context Usage // Part Grouping // Port Connections | Parts: part def SolarPanel { part def CommunicationAntenna { part def AttitudeControlThrusters { part def PayloadBay { part solarPanel1 : SolarPanel { part solarPanel2 : SolarPanel { part communicationAntenna : CommunicationAntenna { part attitudeControlThrusters : AttitudeControlThrusters { part fuelTank : FuelTank { part engine : Engine { part battery : Battery { part avionics : AvionicsSubsystem { part powerConverter : PowerConverter { part solarPanelArray : SolarPanelArray { part fuelPump : FuelPump { part attitudeControlUnit : AttitudeControlUnit { part gyroscopes : Gyroscopes { part accelerometers : Accelerometers { part magnetometers : Magnetometers { part solarPanelArray : SolarPanelArray { part satellite : Satellite { part fuelTankAssembly { part powerSupplyChain { part attitudeControlSubsystem { part propulsionSubsystem { part communicationSubsystem { part navigationAndControlSubsystem { part avionicsSubsystem {"
}